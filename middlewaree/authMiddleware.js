// -= middlewaree/authMiddleware.js =-

// Данный мидлвар дает доступ к той или иной фун только зарегистрированным юзерам

const jwt = require('jsonwebtoken')
const {secret} = require('../config')

module.exports = function (req, res, next) { // мидлвар простая фун, кот принимает (запрос, ответ, next(вызывает по
	// цепочке следующий мидлвар, т.к. их может быть несколько))
	if (req.method === "OPTIONS") { // Проверяем метод запроса. Если он === "OPTIONS", то вызываем следующий мидлвар
		next()
	}
	
	try { // логика мидлвара:
		// токен отправляют в заголовке авторизейшена и он имеет приблизительно такой вид:
		// "Bearer AKsfAKLsfjlakf.SAKfnajksf" - указывается ключевое слово Bearer (это тип токена), а затем сам токен
	const token = req.headers.authorization.split(' ')[1] // вытаскиваем токен из заголовка. Т.к. нас интересует
		// только сам токен и не интересует его вид, то мы делим его на 2 части по пробелу и берем его вторую часть.
		// В массиве это будет по индексу 1
		if (!token) { // Проверяем, если токена нет, то
			return res.status(403).json({message: "Пользователь не авторизован"}) // возвращаем ошибку на клиент
		} // Если токен в заголовке прилетел, нам необходимо следующее:
		const decodedData = jwt.verify(token, secret) // с помощью модуля jsonwebtoken (с которым мы модуль шифровали)
		// декодируем токен (все взято из документации https://www.npmjs.com/package/jsonwebtoken). На данном этапе в этой
		// переменной у нас лежит объект с id и ролями пользователя - тот самый payload, кот мы засовывали
		// в generateAccessToken внутри контроллера
		req.user = decodedData // чтобы мы могли в дальнейшем использовать эти данные мы в запросе создаем поле user и
		// туда передаем эти данные
		next() // после чего вызываем next(), чтобы вызвать следующий по цепочке мидлваер
	} catch (e) { // в случае ошибки
		console.log(e)
		return res.status(403).json({message: "Пользователь не авторизован"})
	}
}

// экспортируем данный файл в роуты

// -= middlewaree/authMiddleware.js =-