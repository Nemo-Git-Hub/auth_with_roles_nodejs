// -= authRouter.js =-

// определим маршруты, по кот будут отправляться запросы json

const Router = require('express') // импортируем роутер из экспресс
const router = new Router() // и создадим объект этого роутера (экземпляр класса).
// Теперь это троутер может прослушивать запросы этого роутера, такие как get, post, delete и  др. http-запросы
const controller = require('./authController') // импортируем контроллер
const {check} = require("express-validator") // импортируем мидлвеер express-validator
const authMiddleware = require('./middlewaree/authMiddleware') // импортируем сюда созданные мидлвары
const roleMiddleware = require('./middlewaree/roleMiddleware')

router.post('/registration', [  // запрос на регистрацию. Вторым параметром можно передать мидлваеры,
// их можно передать несколько и передаются они в массиве
	check('username', "Имя пальзователя не может быть пустым").notEmpty(), // вызываем фун check(поле которое
	// будем валидировать, сообщение которое выведется если валидация будет не успешной).валидатор notEmpty() чтобы поле не было пустым
	check('password', "Пароль должен быть больше 4 и меньше 10 символов").isLength({min: 4, max: 10})
	// указываем валидатор, кот проверяет по длине isLength и он принимает параметром объект. Если нажать
	// CTRL+ПРОБЕЛ становится видно поля, которые он ожидает
], controller.registration) // указываем какая из фун контроллера (authController.js) должна обрабатывать запрос
router.post('/login', controller.login) // запрос на логин (путь, какая из фун контроллера должна обрабатывать запрос)
router.get('/users', roleMiddleware(['ADMIN', 'USER']), controller.getUsers) // запрос для экпериментов и установки
// различных доступов для юзера, админа и в принципе запрещать использовать этот метод не авторизованным пользователям
// Параметры: (1-путь, 2-мидлваер на получение пользователей (authMiddleware) или мидлвар на доступ по ролям
// (roleMiddleware(['ADMIN', 'USER']), где в массиве указываем роли, для которых эта функция разрешена),
// 3-какая из фун контроллера должна обрабатывать запрос). Т.е. теперь эта фун может разрешать админу выдавать какие-то
// права, пользователю получать какие-то данные, для менеджера что-то смотреть и что-то менять
// Теперь наш роутер знает какие функции вызвать на тот или иной запрос

module.exports = router // экспортируем объект этого роутера

// -= authRouter.js =-